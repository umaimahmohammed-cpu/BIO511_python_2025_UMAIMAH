# notes from the youtube vedio
#using loops with lists
fruit_basket =["🍎", "🍌", "🫐"]
for fruit in fruit_basket:
    print (f"the fruit is {fruit}")
    #any thing i write here will be the ptinted one for each item 
#3. ENUMERATE bulid in function to know the indix the item we are curratly iterating on

fruit_basket =["🍎", "🍌", "🫐"]
# we have two values we want to know the i index and the fruit type. and break them by ,
for i, fruit in enumerate (fruit_basket):
    print (f"the fruit is {fruit} is at {i}")

# looping with range
#if want to run a code for ex 10 times 
for i in range (10):
    print(f"looping {i} times")

#it can take 3 arguments 
#here from 10 to 20 counting by 2. it can also type backwords with -1
for i in range (0,5, 1):
    print(f"looping {i} times")


#5. while loops (game loop) : iterates based on some condition.and it will continue to iterate as long as that condition is true. 
#Useful for situations where you don’t know beforehand how many times to loop.
#Stop with Ctrl + C in terminal.
while True:
    print("this will loop forever")
    break #break the loop so it will not run forever
print("back") # out of the loop it will run normal


count = 0
while True:
    count +=1
    print (f"we are loopin {count} time")

    if count >= 5:
        break



#6. continue key word : skips current iteration and goes back to start of loop. 
count = 0
while True:
    count +=1
    if count ==3:
        continue

    print (f"we are loopin {count} time")

    if count >= 5:
        break




# more logical condition

count = 0
while count < 5:
    count +=1
    print (count)
  


# BEFORE IT WAS NOTES FROM LEACTURES HERE STARTS THE NOTES FROM THE PRACRICAL 2
   
my_list=["a" , "list" , "can" , "contain" , "string" , "and" , "numbers" , 2]


print (my_list)
type(my_list) #this not working
print (my_list[0]) # print the first item in your list
print (type(my_list)) #this works 

#3.1 simple loops
my_list= [" person" , "apples" , "what" , "cat" , "dog" , "banana" , " here"] 

for i, items in enumerate (my_list):
    print (f"we have a/an {items} in the list  at indix number {i}")
    if i == 5:
        break


#3.2 nested loops

sequences = ['ATCTGAGTCCACACATG', 'GCGTCGTGCGATGTTCACGTTGAT', 'CAGTAGTACTCAGT', 'GGTATGCTAGACGAGATCTAATA']
codons = ['CCA', 'TGT', 'GTA', 'TAG']
start_codon = ["ATG"]
stop_codons = ["TAA", "TAG", "TGA"]

for sequence in sequences:
  for codon in codons:
    if codon in sequence:
      print(f"{codon}  is in  {sequence} ")

#3.2.1
for seq in sequences:
    for scodons in start_codon:
        for stcodons in stop_codons:
            if scodons in seq and stcodons in seq:
              print (f"{scodons} (start) and {stcodons} (stop) are in {seq} ")

#3.2.2
for seq in sequences:
    for scodons in start_codon:
        for stcodons in stop_codons:
            if scodons in seq and stcodons in seq:
                start_index = seq.find(scodons)
                stop_index = seq.find(stcodons)
                if start_index < stop_index:
                    print(f"{scodons} comes before {stcodons} in {seq}")
